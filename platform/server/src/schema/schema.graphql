## NOTE: This schema was generated by Graphback and should not be changed manually

enum ActionStatus {
  CREATED
  ASSIGNED
  COMPLETED
}

interface Address {
  address1: String
  address2: String
  city: String
  postcode: Int
}

scalar DateTime

"""
@model
@crud.update: false
@crud.delete: false
"""
type DistributionCentre implements Address {
  id: ID!
  name: String
  address1: String
  address2: String
  city: String
  postcode: Int
  lat: String
  long: String
  stockInformation: JSON

  """@oneToMany field: 'distributionCentre', key: 'distributionCentreId'"""
  products: [Product]

  """@oneToMany field: 'distributionCentre', key: 'distributionCentreId'"""
  actions: [VolunteerAction]!
  version: Int
}

input DistributionCentreInput {
  id: ID
  name: String
  address1: String
  address2: String
  city: String
  postcode: Int
  lat: String
  long: String
  stockInformation: JSON
  version: Int
}

scalar JSON

type Mutation {
  createDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  createProduct(input: ProductInput): Product!
  updateProduct(input: ProductInput): Product!
  createVolunteer(input: VolunteerInput): Volunteer!
  updateVolunteer(input: VolunteerInput): Volunteer!
  createVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  updateVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  deleteVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  createRecipient(input: RecipientInput): Recipient!
  updateRecipient(input: RecipientInput): Recipient!
}

"""
@model
@crud.delete: false
"""
type Product {
  id: ID!
  label: String!
  description: String

  """@oneToMany field: 'product', key: 'productId'"""
  volunteerActionProducts: [VolunteerActionProduct]

  """@manyToOne field: 'products', key: 'distributionCentreId'"""
  distributionCentre: DistributionCentre
  version: Int
}

input ProductInput {
  id: ID
  label: String
  description: String
  distributionCentreId: ID
  version: Int
}

type Query {
  findAllDistributionCentres(limit: Int, offset: Int): [DistributionCentre]!
  findDistributionCentres(fields: DistributionCentreInput, limit: Int, offset: Int): [DistributionCentre]!
  findAllProducts(limit: Int, offset: Int): [Product]!
  findProducts(fields: ProductInput, limit: Int, offset: Int): [Product]!
  findAllVolunteerActionProducts(limit: Int, offset: Int): [VolunteerActionProduct]!
  findVolunteerActionProducts(fields: VolunteerActionProductInput, limit: Int, offset: Int): [VolunteerActionProduct]!
  findAllVolunteers(limit: Int, offset: Int): [Volunteer]!
  findVolunteers(fields: VolunteerInput, limit: Int, offset: Int): [Volunteer]!
  findAllVolunteerActions(limit: Int, offset: Int): [VolunteerAction]!
  findVolunteerActions(fields: VolunteerActionInput, limit: Int, offset: Int): [VolunteerAction]!
  findAllRecipients(limit: Int, offset: Int): [Recipient]!
  findRecipients(fields: RecipientInput, limit: Int, offset: Int): [Recipient]!
}

"""
@model
@crud.delete: false
"""
type Recipient implements Address {
  id: ID!
  firstName: String
  lastName: String
  phone: String
  address1: String
  address2: String
  postcode: Int
  city: String
  createdAt: DateTime

  """
  Comma separated list of preferrend products labels.
  Easier to create volunteer actions when knowing what one really needs. 
  """
  prefferedProducts: String

  """@oneToMany field: 'recipient', key: 'recipientId'"""
  actions: [VolunteerAction]
  version: Int
}

input RecipientInput {
  id: ID
  firstName: String
  lastName: String
  phone: String
  address1: String
  address2: String
  postcode: Int
  city: String
  createdAt: DateTime
  prefferedProducts: String
  version: Int
}

type Subscription {
  newDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  newProduct(input: ProductInput): Product!
  updatedProduct(input: ProductInput): Product!
  newVolunteer(input: VolunteerInput): Volunteer!
  updatedVolunteer(input: VolunteerInput): Volunteer!
  newVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  updatedVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  deletedVolunteerAction(input: VolunteerActionInput): VolunteerAction!
  newRecipient(input: RecipientInput): Recipient!
  updatedRecipient(input: RecipientInput): Recipient!
}

"""
@model
@crud.delete: false
"""
type Volunteer implements Address {
  id: ID!
  firstName: String
  lastName: String
  email: String
  username: String!
  address1: String
  address2: String
  city: String
  postcode: Int
  dateOfBirth: DateTime

  """
  This does not work for MongoDB - https://github.com/aerogear/graphback/issues/1241
  @db.default: false
  """
  canPhoneCall: Boolean

  """
  This does not work for MongoDB - https://github.com/aerogear/graphback/issues/1241
  @db.default: false
  """
  canDeliver: Boolean

  """@oneToMany field: 'volunteer', key: 'volunteerId'"""
  actions: [VolunteerAction]
  version: Int
}

"""
Represents action that is assigned to volunteer
@model
"""
type VolunteerAction {
  id: ID!
  title: String!
  description: String
  status: ActionStatus
  createdAt: DateTime

  """@manyToOne field: 'actions', key: 'volunteerId'"""
  volunteer: Volunteer

  """@manyToOne field: 'actions', key: 'distributionCentreId'"""
  distributionCentre: DistributionCentre

  """@oneToMany field: 'volunteerAction', key: 'volunteerActionId'"""
  products: [VolunteerActionProduct]

  """@manyToOne field: 'actions', key: 'recipientId'"""
  recipient: Recipient
  version: Int
}

input VolunteerActionInput {
  id: ID
  title: String
  description: String
  status: ActionStatus
  createdAt: DateTime
  volunteerId: ID
  distributionCentreId: ID
  recipientId: ID
  version: Int
}

"""
Represents a join model between a volunteer action and product

@model
@crud.update: false
@crud.delete: false
@crud.create: false
@crud.subCreate: false
@crud.subUpdate: false
@crud.subDelete: false
"""
type VolunteerActionProduct {
  id: ID!

  """@manyToOne field: 'volunteerActionProducts', key: 'productId'"""
  product: Product

  """@manyToOne field: 'products', key: 'volunteerActionId'"""
  volunteerAction: VolunteerAction
  version: Int
}

input VolunteerActionProductInput {
  id: ID
  productId: ID
  volunteerActionId: ID
  version: Int
}

input VolunteerInput {
  id: ID
  firstName: String
  lastName: String
  email: String
  username: String
  address1: String
  address2: String
  city: String
  postcode: Int
  dateOfBirth: DateTime
  canPhoneCall: Boolean
  canDeliver: Boolean
  version: Int
}